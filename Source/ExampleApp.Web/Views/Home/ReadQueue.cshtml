@model ExampleApp.Web.Models.ReadQueueCommandModel

<form id="ReadQueueForm">
    @Html.EditorForModel()
    <button id="StartReceivingQueueButton" type="button">Start</button>
    <div id="ReceiveQueueMessagesReceived">0</div> read
</form>

<script type="text/javascript">
    function ReadQueue() {
        var readQueueUrl = '@Url.HttpRouteUrl("ReadQueue", new { queueName = ViewBag.QueueName })';
        var payload = $('#ReadQueueForm').serialize();
        $.post(readQueueUrl, payload)
            .done(StartReadQueueSucceeded)
            .fail(StartReadQueueFailed)
            .always(StartReadQueueCompleted);

        StartReadQueueStarted();
    }

    // Called when the user initiates a read queue AJAX request.
    function StartReadQueueStarted() {
        // Disable the button so it cannot be double clicked, or more.
        $('#StartReceivingQueueButton').prop('disabled', true);

        $('#AjaxStatus').text('STARTED');
        $('#AjaxStatusMessage').text('Request submitted, awaiting a response from the server.');
    }

    function StartReadQueueSucceeded() {
        $('#AjaxResult').text('SUCCEEDED');
        $('#AjaxStatusMessage').text('Request accepted by server, the queue is now being read...');

        // Start polling for completion...
        setTimeout(PollReadStatus, 500);
    }

    function StartReadQueueFailed(response) {
        $('#AjaxResult').text('FAILED');
        $('#AjaxStatusMessage').text(response.responseText);
    }

    function StartReadQueueCompleted() {
        $('#AjaxStatus').text('COMPLETED');
    }

    function PollReadStatus() {
        var readStatusUrl = '@Url.HttpRouteUrl("GetReadQueueStatus", new { queueName = ViewBag.QueueName })';

        $.getJSON(readStatusUrl)
            .done(UpdateReadStatus)
            .fail(UpdateReadStatusFailed)
            .always(UpdateReadStatusCompleted);

        GetReadQueueStatusStarted();
    }

    function GetReadQueueStatusStarted() {
        $('#AjaxStatus').text('STARTED');
        $('#AjaxStatusMessage').text('Request submitted, awaiting a response from the server.');
    }

    function UpdateReadStatus(readOperation) {
        switch (readOperation.Status) {
            case 1: // Running
                $('#StartReceivingQueueButton').text('Reading...');

                // Check again later...
                setTimeout(PollReadStatus, 500);

                break;
            case 2: // Finished
                // Re-enable the read button.
                $('#StartReceivingQueueButton')
                    .text('Start')
                    .prop('disabled', false);

                break;
            default:
                alert(
                    'Invalid read operation status: ' + readOperation.Status
                );

                break;
        }

        $('#ReceiveQueueMessagesReceived')
            .text(readOperation.ReceivedCount);
    }

    function UpdateReadStatusFailed(response) {
        $('#AjaxResult').text('FAILED');
        $('#AjaxStatusMessage').text(response.responseText);

        alert(response.responseText);
    }

    function UpdateReadStatusCompleted() {
        $('#AjaxStatus').text('COMPLETED');
    }

    $(function () {
        // Tie the button to the function.
        $('#StartReceivingQueueButton').click(ReadQueue);
    });
</script>
